Notes on IBM 7094 emulator implementation and source code.

The code was originally developed (during 2001-2004) using Borland Delphi, Version 5.

In July, 2017, the source code of B7094 was converted to
build and run using the free Lazarus IDE [v1.8.0RC3] and the
Free Pascal Compiler [v3.0.2].

In December, 2022, development of the newest B7094 v3.4A release was
begun using the newest (as of September 2023) releases of those development
tools (Lazarus 2.2.6, 05 March 2023; Free Pascal 3.2.2, 20 May 2021).

All the commentary below now refers exclusively to Lazarus/Free Pascal.
Commercial Object Pascal development tools such as Borland Delphi (and its
successors from CodeGear, Embarcadero, etc.) are no longer used for the
development of B7094.

The last section describes some aspects of Object Pascal (formerly Delphi,
now Free Pascal) for those unfamilar with the language used to write this emulator.

Some general observations, from the early days:
---------------------------------------------------------------------------------
*** First make it work - Then make it fast.
Apart from the hashing function used for opcode table lookup, very little effort
has been made to achieve high emulation performance. It's fast enough for what
it can do now, and there is plenty of room for improvement should that become
neccessary in the future.

*** PUN intended, but not implemented.
As yet, no 7094 code has been run on the emulator that requires the card punch
device, and therefore this has not yet been implemented. Work was directed to
other functions that were required more immediately.

*** FP-DP Ops not tested.
Mike Hore has developed the floating point code for the emulator, but the double
precision part of this has not yet been tested.

*** Comments in the source code.
Most of the code is reasonably well commented, especially those areas that deal
intimately or directly with 7094 functions. Other parts, which simply involve
the mechanics of an Object Pascal/Windows application may be more sparsely documented.

Some code snippets have been "commented out" but remain in the code.
For the most part, they are probably junk that can removed, but they may indicate
an area of uncertainty, and could provide clues for future development and
debugging.

*** Convoluted transfer of control in device object hierachy.
Just a general observation.
Especially in the I/O device implementations, use has been made of the inheritance
and polymorphism aspects of Object-Oriented Programming. This can be quite hard
to follow as functions are invoked downwards into ancestor objects, and sideways
into associated objects. This sort of thing becomes a bit clearer when the code
is loaded into the Lazarus IDE, but even then it can still be quite confusing.

*** Instruction Command table.
The 7094 instructions and some of their attributes are loaded into a large table
at initialization time. This information makes it easier to decode and dispatch
instructions during fetch and execute, and helps with writing meaningful trace
entries. But the format of 7094 instructions, and the design aim of having many
of the instruction table entries be autogenerated, together with other opcode
decoding issues, makes this section more complex than might be expected.
---------------------------------------------------------------------------------

BUILDING THE APPLICATION
(This also constitutes something of a user's guide to the display windows.)

Files in the ..\Build\Source directory, required to build B7094
Special files, required for any GUI application:

B7094.lpi - Main project file (to be opened in Lazarus IDE)
B7094.lps - Lazarus "session" information
B7094.lpr - Main entry point for B7094 (Application.Initialize . . . Application.Run)
B7094.ico - Application icon

Form files
(GUI window definitions, containing widgets from the "LCL" -- the Lazarus Component Library).
These files all have associated Object Pascal source files -- "units" -- with the same names,
also listed below. (But not all units have associated forms.):

B709FSplash.lfm     - Briefly displayed on startup. The splash screen is automatically closed
                      by a TTimer after 1000 msec. (1 second), but it can be redisplayed at any
                      time by clicking the 'About' button on the control panel, after which it
                      must then be manually closed by clicking its 'Close' button.
B709FControl.lfm    - Main control panel (for application, not machine).
                      Always visible.  Contains checkboxes to display/hide other windows.
                      Contains 'Power Off' pushbutton, 'Editor' pushbutton (to activate Text Editor).
                      The corresponding Pascal file (B7094FControl.pas) contains a change log
                      for source code (which has been kept up to date).
B709FConfig.lfm     - Configuration settings.
                      Specifies default directory paths, default startup script.
                      Displayed/hidden via checkbox on control panel.
B709FConsole.lfm    - Operator Console for emulated machine.
                      Displays main registers, channel registers. Contains
                      'Start/Stop' button, 'Reset' button (zeroes all CPU and channel registers),
                      'Clear' button (Resets the CPU, and additionally zeroes core),
                      'Load Card' and 'Load Tape' buttons, 'Auto' and 'Slow' speed-control
                      checkboxes, duplicate 'Power Off' button
B709FScriptDisp.lfm - The window display portion of the scripter system.
                      Can show text, option menus, 'Continue' and/or 'Cancel' buttons.
B709FReader.lfm     - The IBM 711 card reader window.
B709FPrinter.lfm    - The IBM 716 line printer window. This window is updated by a TTimer
                      with a default interval of 1000 msec. (1 second).
B709FTapeDrives.lfm - The IBM 729 framing window containing sub-windows for individual
                      tape drives.  A radiobutton allows displaying of 'All' configured
                      drives, or -- by default -- only those that have been 'Used' by
                      the currently-running job.
B709FTapeUnit.lfm   - Window for an individual tape drive. Identifies drives by
                      channel-letter+decimal-unit-number, and by octal device address
                      (clicking on the former displays the tape image file in the Tape Viewer).
                      Displays attached tape image file name, mode of access
                      (binary or BCD -- there is just one 'bin' indicator, but binary
                      mode will color it purple, otherwise it is grey),
                      read ('RD') or write ('WR') access (colored yellow when active,
                      otherwise grey), write protection ('PROT' indicator is red if
                      protected, otherwise grey), total size ('Size:') in bytes of tape
                      (number is decimal), current byte position ('Posn:') being accessed
                      (number is decimal), and there's a horizontal slider that
                      graphically indicates 'Posn'.  The 'Opn' button allows attaching a
                      new tape image file (if you want to display it in the Tape Viewer).
                      'Rew' and 'Run' aren't particularly useful.
B709FTapeViewer.lfm - Tape Viewer window. Shows the contents, in 'BCD' or 'Binary' mode
                      (via radiobuttons), of an attached tape image file. By default it's
                      displayed by the demo scripts at the end of a job (in BCD mode,
                      for SYSOUT.BCD), but any tape can be displayed (by clicking on the
                      channel-letter+decimal-unit-number of any Tape Unit with an attached
                      tape image file). Arbitrary "From Byte" and "To Byte" positions can be selected
                      for display. The "Redisplay" button causes the chosen limits to take effect
                      (if "From Byte" is blank, it defaults to 0; if "To Byte" is blank, it defaults
                      to either the last position on the tape or to "From Byte" plus a maximum window size,
                      whichever is lower). "Clear" clears "From Byte" and "To Byte". "Use Whole Tape" resets
                      the limits from 0 up to either the actual size of the tape or the maximum window size,
                      whichever is lower. The maximum window size is large enough to be able to see all
                      of SYSOUT.BCD for all the demos without the user having to increase the "From Byte"
                      and click "Redisplay" to see the end of the tape. All the labels and buttons having
                      to do with the adjustable view window are colored purple, to visually group them together.
                      The Tape Viewer resynchronizes the word framing when starting the display from an
                      arbitrary point on the tape.  There are checkboxes for 'Ruler' (column ruler) and 'Line Nums'.
                      The 'Find:' text box, and its associated button, allows searching for an arbitrary text
                      string (in either BCD or Binary mode). In Binary mode only, the 'Next Mark' button advances
                      the window so that the next Record Gap or File Mark is visible in the display (generally
                      on the third line from the top, unless the bottom of the display is already the end of the
                      tape image file. 'Next Mark' wraps back to the beginning of the tape if it has already indexed
                      through all Record/File markers on the tape.  The 'Deblock to:' checkbox and the
                      text field beside it are for splitting the view of a BCD tape with fixed-length records
                      and no printer carriage control characters into readable equal-length lines ('0' or blank
                      in the text box means 'do not deblock').
                      Toggling between BCD and Binary modes returns the display to the beginning of the tape.
B709FTextEditor.lfm - The text editing window, mainly intended for creating, loading,
                      and running script file (*.EC7).  Multiple editing boxes (files)
                      can be open at once.  Checkboxes 'Ruler' and 'Line numbers' display
                      a column ruler and/or line numbers, respectively (only when
                      an editor has been created via 'New' or 'Open'), but the line numbers
                      do not scroll automatically. 'Run' passes the contents of the editing box
                      to the scripter.
B709FTrace.lfm      - The Log/Trace window, displayed by clicking the 'Trace' checkbox on the
                      Control Panel window. The checkboxes in the the 'Trace Record filters' section
                      on the left selects the classes of items to be traced. The checkboxes in the
                      'Trace Display filters' section on the right selects recorded items to be
                      filtered and displayed in the window (slow!), either afterward or as they're
                      being recorded ('Auto Display' checkbox). If 'Auto Display' is on, the window is
                      updated by a TTimer with a default interval of 1000 msec. (1 second).
                      If you 'Power Off' the emulator or click the 'Clear' pushbutton in the Log/Trace window,
                      you'll be prompted to 'Save current trace data?'. Click 'Yes' and a file
                      ..\Output\B7094.TRC will be written (overwriting one that's already there, if there is one).
B709FStops.lfm      - The Process Stops and Tracing window, displayed by clicking the 'Stops' checkbox on the
                      Control Panel window. This allows entering an (octal) address into one or both text boxes
                      to allow either instruction fetches from that address (upper box) or core stores to that
                      address (lower box) to either cause the emulated processor to stop ('Stop' radiobutton
                      is selected) or cause the action to be placed in the Trace record ('Trace' radiobutton
                      is selected).
                      The 'Enabled' checkbox is automatically cleared when the cursor is placed in the
                      associated address box, and must be re-checked after an address is typed, in order
                      to enable the desired action(s); this is to ensure that the address just typed is the
                      one that will actually be used.
                      A stop or trace action occurs after the instruction is executed or the core location
                      is altered. When a stop or trace action occurs the 'Trace' checkbox in the
                      Control Panel window is automatically checked and the Log/Trace window becomes visible.
                      If Store to Address tracing is enabled, trace events will automatically be recorded
                      (in the Core Write category). If the 'Auto Display' checkbox on the Log/Trace window
                      is checked, then Store to Address trace events can be displayed as they occur by also
                      checking the 'Core Write' checkbox under 'Trace Display filters'. Alternatively, the
                      recorded trace data can be filtered in the display window after it has been accumulated,
                      also by checking the 'Core Write' checkbox under 'Trace Display filters'. ("On-line"
                      tracing should be used judiciously, if at all, because it can cause the emulator
                      to operate very slowly.)  The recorded trace data is treated as described above for
                      the Log/Trace window (can be saved to a file, etc.).
B709FCoreView.lfm   - IBM 7302 Core Storage window
                      An (octal) base address can be typed in the 'Address:' box.
                      If the cursor is in the Address box, the 'Page Up' and 'Page Down" keys
                      can be used to scroll the core display window up by a full window's worth
                      of rows (to lower addresses), or down (to higher addresses), with displayed core
                      addresses wrapping around in either direction (from 0 to 77777 or vice versa).
                      Left and Up arrow keys, or Right and Down arrow keys can be used to scroll the
                      entire window by one row's worth (of four machine words) at a time, also with wrap-around.
                      The '00000' button resets the base address to 0, while the 'Highest' button
                      resets the base address such that the **last** row displayed contains the final
                      four addresses of core (77774-77777). A typed-in base address can be any value
                      between 0 and (one less than) the value selected by 'Highest'; anything
                      outside that legal range is ignored. But base addresses do not have to be "aligned"
                      on multiples of 4 (though automatic wrap-around will "resynchronize" the base address
                      to a multiple of 4).
                      The contents of the Core View window are updated by a TTimer with a default
                      interval of 1000 msec. (1 second).
B709FCorePlot.lfm   - The Core Plot window, a graphical display of core usage, with memory locations
                      represented by blocks of colored pixels. Pixels are black initially, a write to
                      a location turns it blue, a read from a location turns it green,
                      a (pending) instruction fetch flashes a pixel white (before the
                      actual fetch turns it green).
b709ferrorpanel.lfm - Error message display form.

Pascal source files
All of the above *.lfm files have associated Object Pascal "units" with the same
base name (with extension *.pas).

Additionally, there are a number of Pascal source files with no associated forms:

B709UCPUDefs.pas       - Global definitions, CPU bit masks
B709UEmulMisc.pas      - Miscellaneous utility functions
B709XCPU.pas           - CPU main control functions
B709XChanDevs.pas      - Channel and basic device operations
B709XInstrBasic.pas    - Instruction emulation - Basic instructions
B709XInstrArith.pas    - Instruction emulation - Fixed point arithmetic
B709XInstrFloatPnt.pas - Instruction emulation - Floating point arithmetic
B709XInstrInpOut.pas   - Instruction emulation - Input/Output
B709XInstrExtPerf.pas  - Instruction emulation - Extended performance set
B709XInstrDefine.pas   - Instruction Control Table
B709OScripter.pas      - Scripting interpreter
B709OScripterBase.pas  - Scripting interpreter supporting functions
B709UStream.pas        - "Memory Stream" subclass definition
B709UForms.pas         - A stub "RegisterForm" procedure
b709dhelp.pas          - The beginnings of a help screen for the scripting language.
                         It has been maintained as documentation (see also
                         "B7094ScripterSyntax.txt" in this directory), but is not
                         compiled or linked with the application.
B709Cmps.pas           - Specialized display components for Operator Console and other windows
                         These must also be added to the Lazarus IDE following the IDE's
                         initial installation and before it can be used to build B7094.
                         (Doing so will create an additional source file: 'B709Cmps_package.pas'.

And last but not least:

B709Cmps_package.lpk   - This is the "package" file describing the custom components that
                         will be installed into the IDE.


*** The following are a few notes concerning the programming language that
began life as "Delphi" (a commercial product from Borland), and has since been
"resurrected" as a pair of free and open-source tools: "Lazarus" (the IDE,
Integrated Development Environment) and "Free Pascal" (the compiler).
(Lazarus is itself written in Free Pascal.)

Don't be tripped up by the nomenclature used below: "Object Pascal" is
a generic term referring to all the object-oriented dialects of Pascal
developed over the years ( en.wikipedia.org/wiki/Object_Pascal );
"Delphi" was a specific commercial version sold by Borland (joined at the
hip with its IDE, as all these object-oriented Pascal dialects tended to be);
( en.wikipedia.org/wiki/Delphi_(software) ); "Free Pascal"
( en.wikipedia.org/wiki/Free_Pascal ) attempts to be as compatible with
Delphi as its community of maintainers can make it, and "Lazarus"
( en.wikipedia.org/wiki/Lazarus_(software) ) is Free Pascal's IDE.
Got that? "Object Pascal" sounds more dignified than "Free Pascal",
so that term is frequently used below, but "Free Pascal" or
"Lazarus/Free Pascal" or "Lazarus/FP" are also freely interchanged -- and
they're **all** talking about the same thing!

*** *.lpr, *.lfm and *.pas files
These are the three main types of source file in Free Pascal.

The *.lpr file is the "root" of the GUI application.  It instantiates all the
windows (a.k.a. "forms", defined in the *.lfm files) and initiates execution
of the application. It's the entry point of the code -- you can think of it
as the "main" routine. There is only one *.lpr file in a project.

The *.lpi file is the main project file that links all the others together --
names them all for the Lazarus IDE. This is the file you open in Lazarus
if you want to rebuild the program. There is only one *.lpi file in a project.

The *.pas files contain actual Object Pascal code. Each defines a "unit" which is
compiled separately and then linked together with all others. The guts of the
code lies in the "implementation" part of the unit, and is generally private to
the unit. However, items within a unit can be exposed for access by other units
by placing their declaration information in the "interface" part of the code at
the start of the unit. The interface part also contains a "uses" clause that
specifies the names of other units that have exposed items which this unit needs
access to.

The *.lfm files are descriptions of the "forms" (or windows) that make up the visible
part of the application. This code is rarely edited directly by the programmer
(that is, if you tend to use the IDE to move widgets around on windows; but you certainly
can use a text editor to add, delete, and change the characteristics of widgets
in the *.lfm file, if that's your preferred mode of working). The Lazarus IDE
maintains these files as the programmer edits the form layout using graphical editing
facilities. Each *.lfm file defines exactly one form or window, and is always associated
with a *.pas file that contains the code for responding to user events coming from
the form, and for updating the form display to the user.


*** Private, Protected and Public areas in Object Pascal objects.
These keywords delineate which fields and methods of an object are visible, and
to what other entities they are visible.
Private is known only to the methods of the object itself.
Protected is known only to the object, and its descendants.
Public is visible to all.


*** Properties in Object Pascal.
An object may control how its fields are externally accessed by the use of
properties. The property specifier in the public section of the object definition
may simply link to the name of the underlying data field (defined in the private
part), or may exercise more control by linking to a function for read access
and/or a procedure for write access. By convention, the underlying field variable
name is prefixed with the letter "F", and the read function/write procedure names
are the name of the variable, prefixed with "get" and "set" respectively.


*** Object Pascal is a single-pass compiler.
And therefore all items must be defined before they are referenced.
This leads to higher level procedures being placed towards the end of the code
in a unit, after any sub procedures and data items that they reference.
This is less true for object methods, which are all declared in the object
definition, and so may be placed freely anywhere after that.


*** Some notes on building B7094 from source using the Lazarus IDE
in conjunction with the Free Pascal compiler.

Note for Linux/Mac OSX users: B7094 was originally written for a Windows
environment using the Delphi VCL (Visual Component Library), and
has Windows dependencies baked into it.  The Lazarus/Free Pascal version of
B7094 uses the LCL (the Lazarus/FP equivalent of the VCL), and retains
these Windows dependencies.  Both 32-bit and 64-bit builds of B7094
using Lazarus/FP will run on Linux under Wine (and even on Mac OSX using
Wine 8.x -- at least the x86-64 version). B7094 will
run on versions of Windows ranging from 32-bit Windows XP (SP3)
through contemporary 64-bit Windows.

INSTALLING LAZARUS/FREE PASCAL

Since B7094 is primarily intended for Windows, and contains Windows dependencies,
the build instructions given here assume that Lazarus/Free Pascal will be installed
**on Windows**.

Download the Win32 and/or Win64 installers from
https://sourceforge.net/projects/lazarus/files
The Windows installers are, e.g.,
lazarus-2.2.6-fpc-3.2.2-win32.exe
lazarus-2.2.6-fpc-3.2.2-win64.exe

If you want to create both 32-bit and 64-bit executables, the simplest
way to do this (according to a lot of folks on the forums) is just to
install **both** the 32-bit and 64-bit versions of Lazarus/FP mentioned
above (there are cross-compilers, but they're not discussed here).
The 32-bit version of Lazarus/FP creates 32-bit executables, and the
64-bit version of Lazarus/FP creates 64-bit executables, without
any additional fuss and bother.

The installer puts Lazarus/FP by default in the directory C:\lazarus, but
if you're installing both 32-bit and 64-bit versions, you'll want to change
this to, e.g., C:\lazarus32 and C:\lazarus64.  On the same 'Select Destination
Location' setup screen, there's a checkbox labelled 'Create a new secondary
installation'.  Make sure this is checked (for **both** versions) -- this
keeps the configuration files for the two versions separate.  You can specify
a 'config' directory underneath your installation directory, and let the
installer create the directory and put the config file there when prompted
(but don't create the ..\config directory ahead of time, or you'll get an
error message from the installer).  Pick whatever components and file
associations you want (I skip the CHM help files, the Qt* interfaces, and
the SSL stuff) and keep the checked file associations).  Do what you want
with the Start Menu shortcut (I skip it).

The first time you start the Lazarus IDE, it starts up with an empty
(skeleton) project, including an empty "Form1", etc.  Click
'File->Close All' to dismiss this.  (If you then click 'File->Quit', you'll get
a message 'Save changes to project project1?" -- answer 'No'.)

INSTALLING THE CUSTOM COMPONENTS PACKAGE FOR B7094

B7094 uses custom screen widgets (e.g., for the register display "lights"
on the Operator Console window) and these have to be incorporated into
the IDE itself (yes, Lazarus will actually rebuild itself during this
process).

So after you've installed one or both versions of Lazarus/FP using one or both
of the Windows installers, and before building either B7094.32.exe or
B7094.64.exe you need to install the custom components package
(initially comprising files B709Cmps.pas and B709Cmps_package.lpk; a new
file B709Cmps_package.pas will be created during this process)
to the Lazarus design-time palette.  Bring up the IDE (dismiss 'project1':
'File->Close All'), and make sure the Messages window at the bottom of the screen
is visible ('View->Messages'). Click Package->Open Package File (.lpk)
and navigate to the directory containing the B7094 source code.  Select B7094Cmps_package.lpk
A window "Package B709Cmps_package V0.0" will open.  Click on B709Cmps.pas and
make sure that in the "File Properties" panel the "Register unit" checkbox is checked.
Click the "Compile" button.  This will create a "lib" subdirectory in the B7094 source
directory with the compiled components package inside it.  When the green-highlighted message
"Compile package B709Cmps_package 0.0: Success, ..." appears in the Messages ('View->Messages') window
(ignore any warnings), the package has been successfully compiled.
To install the package, click 'Use->Install' on the package window.
Click the Yes button on the "...Do you want to rebuild Lazarus now?" confirmation window.
The Lazarus IDE will now be rebuilt.  When the build process is finished, the
IDE will restart automatically.

You have to do this components installation for **both** the 32-bit and 64-bit versions
of the IDE, if you've got them both installed.

To confirm that the package installation was successful in an IDE, go to
'Package->Install/Uninstall Packages' and make sure that "B709Cmps_package 0.0"
is listed in the left pane of the screen, at the top of the
"Install" list, with the "Uninstall selection" button below
it. (They should have labelled the list "Installed", not "Install"!)

BUILDING B7094

Start the IDE (the 32-bit Lazarus if you're building B7094.32.exe; the
64-bit Lazarus if you're building B7094.64.exe).
Once again, dismiss the skeleton project by clicking 'File->Close All'.
Then click Project->Open Project ..., navigate to the B7094 source-code directory, and
select the project file B7094.lpi.  Answer the query window "Save changes to
project project1?" by clicking the No button.  You can also now close the
"Package B709Cmps_package V0.0" window.

The B709Main.pas unit will be displayed in the Source Editor window.  If it isn't, or to see
the main form (or any other form) and its components, type Shift-F12 to bring up the View Project Forms
window, select MainForm, and click OK.  You can toggle the form graphics display
on and off by typing F12 (without the Shift).

To build the emulator, click on Run->Build.  If you get a message "The output directory '..\Build\work'
is missing." click the 'Create it' button. When you see the green-highlighted
"...Compile Project, Target: B7094.exe: Success, ..." message in the Messages
window, you should have a runnable B7094.exe (you might want to rename this
to B7094.32.exe or B7094.64.exe, whichever version you built).  You can ignore any warning
messages.

A "sesson" file (B7094.lps) is automatically created by Lazarus.  It saves the state of your current
environment -- windows you have open, etc.  You can close any windows you find distracting -- forms
editing windows, "object inspector", etc. and your choice of layout will be saved in the "session" file
B7094.lps .  (Close the "Source Editor" by clicking File->Close Page).

Note: Under Project->Project Options, in the "Compiler Options" half of the tree
in the left pane, there's a "Debugging" entry.  These options have all been
deselected to minimize the size of the executable.
